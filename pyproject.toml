[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "videos-manim"
version = "0.1.0"
description = "Animations vidéo avec Manim pour expliquer les concepts techniques"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "your.email@example.com" }]
maintainers = [{ name = "Your Name", email = "your.email@example.com" }]
keywords = [
    "manim",
    "animation",
    "education",
    "signalr",
    "api",
    "visualization",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Education",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Scientific/Engineering :: Visualization",
]
requires-python = ">=3.10"
dependencies = [
    "cs-manim==0.1.0",
    "manim==0.19.0",
    "pillow==11.2.1",
    "numpy==2.3.0",
    "scipy==1.15.3",
    "pycairo==1.28.0",
    "moderngl==5.12.0",
    "glcontext==3.0.0",
    "pydub==0.25.1",
    "av==13.1.0",
    "audioop-lts==0.2.1",
    "rich==14.0.0",
    "tqdm==4.67.1",
    "watchdog==6.0.0",
    "screeninfo==0.8.1",
    "click==8.2.1",
    "cloup==3.0.7",
    "decorator==5.2.1",
    "networkx==3.5",
    "typing_extensions==4.14.0",
    "markdown-it-py==3.0.0",
    "mdurl==0.1.2",
    "beautifulsoup4==4.13.4",
    "soupsieve==2.7",
    "srt==3.5.3",
    "ManimPango==0.6.0",
    "Pygments==2.19.1",
    "pyglet==2.1.6",
    "pyglm==2.8.2",
    "moderngl-window==3.1.1",
    "mapbox_earcut==1.0.3",
    "isosurfaces==0.1.2",
    "skia-pathops==0.8.0.post2",
    "svgelements==1.9.6",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/videos-manim"
Repository = "https://github.com/yourusername/videos-manim"
Issues = "https://github.com/yourusername/videos-manim/issues"
Documentation = "https://github.com/yourusername/videos-manim/wiki"

[tool.setuptools.packages.find]
where = ["."]
include = ["videos*"]
exclude = ["tests*", "*.tests*", "*.tests.*"]

[tool.setuptools.package-data]
videos = ["**/*.py", "**/*.md"]

# Configuration pour Black (formatage de code)
[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Dossiers à exclure
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | venv
  | media
  | videos/.*/media
)/
'''

# Configuration pour isort (tri des imports)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "**/media/**",
    "**/__pycache__/**",
    "**/venv/**",
    "**/build/**",
    "**/dist/**",
]

# Configuration pour MyPy (vérification de types)
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true
exclude = ["venv/", "build/", "dist/", "media/", "videos/.*/media/"]

# Ignorer les erreurs pour les modules sans stubs
[[tool.mypy.overrides]]
module = [
    "manim.*",
    "numpy.*",
    "scipy.*",
    "PIL.*",
    "pydub.*",
    "av.*",
    "moderngl.*",
    "glcontext.*",
    "pyglet.*",
    "pyglm.*",
    "screeninfo.*",
    "watchdog.*",
    "rich.*",
    "tqdm.*",
    "networkx.*",
    "beautifulsoup4.*",
    "srt.*",
    "skia_pathops.*",
    "svgelements.*",
    "mapbox_earcut.*",
    "isosurfaces.*",
    "audioop_lts.*",
]
ignore_missing_imports = true

# Configuration pour pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--strict-config",
    "--cov=videos",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Configuration pour coverage
[tool.coverage.run]
source = ["videos"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/media/*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Configuration pour Ruff (linter moderne et rapide)
[tool.ruff]
line-length = 120
target-version = "py310"
extend-exclude = [
    "venv",
    "build",
    "dist",
    "media",
    "videos/*/media",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".tox",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by black)
    "F401", # imported but unused (souvent utile pour les imports Manim)
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Autoriser les imports non utilisés dans __init__.py
"videos/**/signalr.py" = ["F403", "F405"] # Autoriser les imports * pour Manim
"videos/**/*.py" = [
    "F401",
] # Autoriser les imports non utilisés dans les fichiers de scène

[tool.ruff.lint.isort]
known-first-party = ["videos"]
known-third-party = ["manim"]
